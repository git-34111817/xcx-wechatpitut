pycharm:
Ctrl+/注释当前选中的代码。
__dict__:获取init中self定义的变量。
类的首字母必须大写。
定义变量或函数：全部小写，单词用下划线分隔开。
python的转义字符在前面加\。

linux终端->python
exit()退出
ctrl + D 

ipython3
python tab键自动补全。

#!/usr/bin/python表示解释器，然后终端./sadsad.py
#coding=utf-8

单行注释：#开头表示注释
多行注释：'''
内容
'''
次方计算的表示方法a**n，表示a的n次方。
名字 = "name "
for循环中没有记录次数的值，所以只能手动记录值。
complex复数
List列表   一个数字用[]，多个数字用list()
Tuple元组
Dictionary字典

print(type（name））type可以返回name的类型。

命名法则：驼峰法，下划线法.

查看关键字方法：import keyword
		keyword.kwlist
\n \t换行和tab键
str()将类型匹配
print("我的年龄是%d%s"%(age,name))格式化输出
print("shjkdsf",end='')
print（变量）可以直接打印
username = input("请输入您的用户名：") # input获取的值全部都为str
(py2中是raw_input(),input（）会直接计算出他的值)
help(print)
dir(print)
3**2=9
3**3=27
3**4=81
print("haha"*30)

A,B = 100,110  两个数的赋值。
A,B = B,A 两值的替换。

vi自动补全：Ctrl+n

表示假："" 0 {} [] ()或者__self__.list == {}也表示假。

if 条件：
	内容1
else： 
	内容2

while 条件：
	循环体
print（"*"*10）

for temp in "abcdf"
	print("%c"%"abcdf"[temp])
else:
	循环不满足条件时执行的代码

在Python中结尾的\0不代表空，不能作为结束的标志。

用数组时[开始位置:结束位置:步长]
步长：每隔几个位置取一个值
结束位置-1为倒数第一个
a,b = b,a交换位置

len（name）取str长度
find index 找位置
a.index（‘a’,1,3）
rfind rindex从右边开始找。
count("o"，开始位置，结束位置)测一个字符串中o的个数
replace（"haha","HaHa"） return的str只是个中间产物，跟原字符串没有关系
name.split(" ")以空格分割文本 会删掉原来的（方括号）列表：列表内是元素。
遍历：从头到尾扫描一遍。
partition("str")将一个文件分割成str左右三段（圆括号）元组。元组值不能更改。
大括号的叫字典
rpartition("str")
capitalize()把字符串首字母大写
title（）把字符串每个字母都大写
startswith（）以什么开头，返回true非0&false0
endswith()以什么结尾
lower()str中的大写字母小写
upper()str中的小写字母大写
ljust(10)靠左
rjust()靠右
center(30) 宽度30
lstrip("x")割掉左边的x
rstrip()割掉右边的所有空格
strip() 删除两边的空格
splitlines()把换行\n做分界线
isalpha()判断str中是否都是字母。全是返回True，否则false
isdigit() 判断str中是否都是数字。全是返回True，否则false
isalnum()判断所有字符都是字母或数字
isspace()是否只包含空格
join（）将每个字符后面插入str，构造出一个新的字符串。2、可以连接字符串。
str = "_"
str.join('"nihao","wojiao"')
输出："n_i_h_a_o","w_o_j_i_a_o"
str = "_"
li = ["nihao","wojiao"]
输出："nihao_wojiao"
a = 100
help（a.join）

切片：
>>> L[1:2]
['xixi']
name = "abc.txt"
findPosition = name.rfind(".")
newName = name[:findPosition] + "[copy]" + name[findPosition]
>>>abc[copy].txt

eval用法：






python可以保存多个数据，每个数据类型可以不同。
while i<len(str)最好不要这样设计，每次循环都得计算len(str).

线性编程：找字符串：for temp in 字符列表
			if temp=="比对"：
				i = 1
				break
设计数组算法：增（name.append("内容")：加入到最后。name.insert(1,"内容")：往第二个位置加入。name.extend（数组）：可以加多个数组）
append只能接受单个的元素，并加在最前面。
extend可以接受数组，加在最后面。
删：(del直接删（del name[2]） pop删最后一个(name.pop()) remove根据值去删)
查（if "数组内单个内容" in 数组。if "数组内单个内容" not  in 数组     ）

+和extend不一样：加是将后面的运算好后重新添加到前面变量中，而extend是索引好后直接添加在最后面是空间上的变化。

排序sort：（num.sout()从小到大排序。num.reverse()和num.sout(reverse=True)降序。）字符串和数字不能混合排序


import redom
redom.redpmint(1,2)
import time
time.sleep(1) #1s执行。 

当是这种情况时['a','b','v']
想输出abv,只能一步一步输出。
for temp in 数组：
	print（temp，end=''）

元组不支持赋值。元组假如说一个值也要加，。列如：name = (name,）这是一个值表示

字典：name = {"name":"zhang",...}
读取：name("name")   没有数值会报错
	name.get("name", 18)没有数值会返回NULL
修改:name["name"]=name
增加元素：只要key不存在且赋值了一个，就相当于添加。name["key"]="name"
删：del name['key']。
	namr.clear() 删除所有的key。

len:测键值对的个数len(info)
keys:返回一个包含所有key的列表info.keys()
values:取出所有的值。info.values()
items:返回一个包含所有（键，值）元组的列表。
	[("key","value"),...]
name.has_key(key):判断是否有key，有返回True
常用：for temp in name.items():
	print(temp)取出键值两值的列表来。
	print（"%s:%s"%(temp[0],temp[1])）
	temp本身就是个元组，我也可以这样写for key,value in name.items:

enumerate:作用可以直接取出循环次数的值。
for i,chr in enumerate(chars):
	print i,chr

[11,22]*2=[11,22,11,22]

功能与功能之间空一行。
help（num.sort）


函数：def 函数名(): 
	"这里是说明"
	函数内部



查看库命令方法：ipython3->import randomr然后tab tab。
while True:
	循环
	break

函数内部定义的变量是局部变量（形参也是局部变量）
函数外部定义的变量是全局变量
全局变量在局部中不能更改，要更改需要加"global 变量"。可以直接获取

最好不要用全局变量
，能不用就不用

返回多个参数：用数组[a,b,c]
a,b = (11,22)
缺省参数  def 函数 （a,b,c=3.5）：缺省参数一般放在列表的最后一个地方。a,b可以这样写b=1,a=2这样就切换了。 
不定长参数def 函数（a,b,*args,**kwargs）:其中*args就可以多传参数元组。**kwargs是字典。所以传参的时候按照字典的形式去写。不带名字的给元组，带名字的给字典。
想获取一个元组里面所有的值，加*，意为解包。

id(变量)获取内存地址




文件：
打开文件：f = open('test.txt','w')
	r:只读打开，当文件没有就崩了
	w:写入 当文件有就全覆盖了，没有就创建
	a：追加到最后
f.close()

f.read(5)一次读五个字节
f.splitlines()每次读一行
f.readline（）每次读一行
f.readlines()读出所有来
f.write("content")写内容
f.tell()返回当前位置。
f.seek(偏移量，from)偏移量可正可负，from：0.表示文件开头。1.表示当前位置。2.表示文件末尾。Python3中seek已经不成样子了。一般这个是2的事情
import os
os不用命名变量，直接能有。
文件重命名os.rename(old,new)
文件删除os.remove(path)
创建文件夹os.mkdir("")
获取当前目录os.getcwd()
修改默认目录os.chdir()
获取目录列表文件内容也会获取文件的os.listdir()
删除文件夹os.rmdir()


类：（类名，属性特征，方法行为）使用自己内部刚建立的函数要加self.函数
class 类名：
	__init__(self):  （这个函数是默认调用的）
		初始化函数
	def xxx(self):
		内部函数
类名规则：大驼峰（字母全大写）
变量 = 类名(给__init__())
变量.内部函数（）

给对象添加属性
xiaohuamao.color = '花色'
获取print（xiaohuamao.color）

获取这个对象的属性，2种方法：
1.对象.属性
2.定义一个方法，这个方法中，使用self.属性

def __str__(self): 其意义是当申请类名变量时，直接返回变量名就是返回str的返回值。所以str一般都要做一个return。 

变量前面加两个下划线，意思是私有变量名，外部不要进行访问。

def __del__():意义删除对象，要做的处理函数。 
有一个引用计数器。
使用内存的时候，内存该删的时候就删，不用了就删。内存很贵的。

多继承调用，一般在class 类名（先调用，后调用）：没有覆盖现象。一般都是调用1里面的，没有再调用2
当多继承及其复杂时，找到内部的函数名就不确定了，但是可以用变量名.__mir__（）这个函数获取出轮到位置。在前面的先调用，后面的后调用。

面向对象有三种特殊的东西：封装，继承，多态。
实例属性和类属性。

dir(类名)：告诉你类中那些能访问，那些不能，有什么东西。
访问私有属性的方式：1，类中直接操控。2，dir(类)找到你需要的那个私有明文类，然后访问。
globals:查看当前命名空间内所有的变量。
locals:打印出局部变量。
ipython3默认内嵌函数有dir(__builtin__)。
LEGB原则。
类方法（做统一管理计数处理的时候）：
设计一个改变类值的函数：
name = 100
@classmethod
def SetNum(cls,newsetnum):
	cls.name = newsetnum
a = 类名
a.SetNum(200)
或者 
类名.SetNum()
就改了。

静态方法：
@staticmethod
def test():
	print("当前这个程序，是验证Test类的")
用法功能和@classmethod一样。


捕获多个相同异常时：
try:
	wenti
except （Name,F）:
	过。

捕获多个所有类的错误信息：
try:
	wenti
except （Name1,Name2) as 变量:(这个放到最后边)
	变量:获取到的错误类的信息。

捕获所有异常：

except Exception as result:(捕获系统异常)
Exception解释 ：所有异常类的基类

def 函数名(变量，变量=3.5，*args,**kwargs)定义函数有一定的顺序。

else：（如果try没有异常才会执行else)
	执行代码
finally:(有无异常都做处理)

异常的传递：
到最上层，要是没有问题的处理就崩了

自己创建异常
raise 类名（init传值）

抛出自定义异常：
calss Teat(Exception):
	def __init__(self,length)
		self.length = length
try:
	rease Test(1,2)
except:Test as result:
	print(resault.length)
异常处理中抛出异常：


import time
time.sleep(1)延迟一秒

interrupt：中断

__name__:如果直接掉用这个脚本的话，这个值是__main__，如果间接的调用这个值时，就是这个脚本的名字。
if __name__ == "__main__"
	函数 #这段代码就是可以用来做测试，当import调用时不会执行。

import test 这种方式有个域的引用，一般开发中用某个功能，一般是下面的做法

应用不加域
from random import *
from random import randint,randfloat   :(引用多个)
help（random）：获取模块的内容

dir(对象)：查询内置的函数或者变量名。
echo $PATH 查看环境变量。
查看文件内容，自己去创造。 usr/lib/python3.5/
import模块导入路径的问题。
一般都是import sys
	修改sys.path。用insert（1，"地址"）
cd -上一次打开的目录。

__all__ = ["文件名","文件名"] :内容表示（import 文件 from *）中的*到底表示谁。填进去的函数就能用，不填的就不能用。all仅仅影响星星。有控制文件和类的功能，看具体使用的地方。
cache:缓存
pyc就是缓存

工作组同名文件处理：
import laowang.test.laowangtest
用的时候：laowang.test.laowanghanshu()
from laowang import *    laowang文件夹是包。
文件夹下创建__init__.py，这个文件夹就是包，
文件内部使用__all__ = ["文件不加后缀1"，"文件不加后缀2"]。这样就能了。

制作包。
安装包：python setupup.py build
生成发布压缩包：python setup.py sdist。在dist文件夹下找。
使用：解压下成目录：python setup.py install

给程序传参数：
import sys
print(sys.argv)
多参数就用空格隔开

列表推导式：a = [x for x in [11,22,33,44]]
a 就等于[11,22,33,44]

取数： range(开始，结束，步长)
for循环还可以写if:a = [x for x in range(1,101) if x%2==0]。也可以for套for。
set:集合
list：列表
tuple:元祖
a = [11,22,33,44,33,22,11]
b = set(a)
b返回：(11,22,33,44)  大括号不一定是字典，也有可能是集合。
c = list(b)
返回[11,22,33,44]


当要多次判断的时候：先把条件最复杂的放到一边用最后的else来执行，然后下面把条件由大到小的控制 依次写开为止。



用切片：[:-1]
用删除两边的字符scrip




进阶：
重新导入模块（更新模块）：
from imp import *
reload（） 
模块尽量分开。
is作用：判断是否指向同一块内存空间。
内存地址在-5到126之间的相同的。出了范围拷贝内存地址就不同了。
深拷贝：
import copy
b = copy.deepcopy(a)引用的考深度的考
c = copy.copy(a)只拷贝一层。可变类型考一层，不可变类型考地址。
切片一定不能越界。
进制之间的转换：十转二bin/二转十int/十转八oct/八转十int/十转十六hex/十六转十int。int（要转换的值,目前的进制）
二进制0b开头。
八进制0o开头。
十六进制0X开头。

arduino
变量名也可以用下划线。self.name = 1

property用法：
num = property（getNum，setNum）
直接赋值t.num = 1 #相当于调用t.num = setNum（1）
或者（装饰器）
@proprty #将来能获取的名字
def money(self):
	return self.__money
@money.setter #将来能置值的名
def money(self,value):
	if isinstance(value,int):
		self.__money = value
	else:
		print("error:不是整型数字")
迭代器:
可迭代的：1集合数据类型list、tuple、dict、set、str。第二是生成器。这些都可用for去循环迭代称为迭代对象：Iterable。
判断是否可以迭代：isinstance（"abc",Iterable）判断一个对象是否是iterable对象。需要加个包from collections import Iterable
isinstance(100,int)是否是整数类型。
iter(100)转换成迭代器。

闭包：
函数内再定义一个函数并且这个函数引用了外面的形参叫做闭包。
定义个变量接收这个闭包可以继续当函数使用。
装饰器
	语法糖
def w1(func):
	def inner():
		#验证1
		#验证2
		func()
	return inner
@w1
def f1():
	print("f1")
@w1
def f2():
	print("f2")

@w1相当于一句话，有他已经装饰开了。
生成器



编程要讲究开放封闭原则：封闭已经实现的功能代码块，对扩展功能开发。也可以龙式引用。
next（）列表可以用next将流指向下一个。
lambda 匿名函数。

命名空间：

往一个类class中可以直接加入变量属性。但加入函数属性就会出错。此时应该这样加入:
import types
method(function,instance)
类对象.要添加的函数名 = types.MethodType(函数名，帮到那个对象)
这样 类对象.要添加的函数名（）就能调用了。

静态方法：
@staticmethod
def test():
	print("")
静态和动态的区别:静态定义下啥就是啥，类型不能改变。动态弱类型，2可以添加属性。
如果不想添加属性的话：class内部加入__slots__ = ("name","age")内部有的属性就能添加和访问，没有添加的会立马报错。

type(110)：返回int类型。
类型int char 都是一个类。
type创建类：Test = type（"Test2",(),{}）
type产生的叫元类。

cpu中运算乘法是加法位运算。
python中尽量避免重名，因为重名不会提示。

getattribute内建属性。
当调用__getattribute__(self,obj):obj就是讲要获取的值。访问属性的拦截器（这里不包含置值）。
对象.startwith("a")判断是否以a开头的字符串。
当用上边的这个getattribute时禁止使用self防止死循环。
因为当要访问内部的self.name时，就一定会访问getattribute，这样class背部就变成了一个死循环。所以禁止使用self.属性。

range 创建一个列表由大到小。
a = range(5)或者range(0,5)
list(a)转化成list
python3中变成了next获取，二者的区别就是3中更节省内存空间。


map函数：
集合列表：&交集、|并集、-差集、^对称差集在（x,y）但不会同事出现在二者中。集合set去重。
lambda小函数。
range。和python3中的xrange。
next()。
两个参数。
map做混合数据
filter过滤。
reduce
Sort
sorted
加密sha256。
Python查语法软件。
常用命令查询import functools
dir(functools)
偏函数：partial意义在于传递参数以后就不用传参了。
warps：当class装饰函数时，两者都有参考注释，wraps作用就是显示函数的注释而不显示class的注释。


编码风格：当参数太多时可以像c那样挪下来。
函数和函数两行空开，函数和类两行空开。


调试：Python3 -m pdb name.py
l显示当前要执行所有代码的位置。
n下一个代码。
c就是continue继续执行代码。
断点b 7，在第七行加断点。
clear c都可以清除一个断点。
s：step进入到一个函数。
call就是指向的意思。
p a：断点情况下查看变量a的值。
a：查看所有参数变量的值。
q：退出。
函数内按r直接退出函数。相当与return。

在ipython中想调用函数：imoprt pdb
pdb.run("函数(11，22)")
然后s进入函数。

一行代码放两行语句，中间加封号。前边没有空格，后边有空格。
冒号两边一般没有空格。
函数默认值的时候两边不需要加空格。
pep8查找规范。


多任务CPU处理算法叫时间片轮转

手播动画：万一想用心了可以去淘宝买一个哈。
多进程：
创建子进程：import os
ret = os.fork()
ret 就是新进程的标识。
get.pid()
get.ppid()获取父进程id
应用交互：
管道交互，线性队列交互。

跨平台使用方法：from multiprocessing import Process    #扔掉fork()
def test():while True:print("h")
p = Process(target=test) #执行test的代码。这是多进程。
p.start()
p.join([timeout])#堵塞，堵住不让执行下面代码。等到join前面的对象p执行结束时，再去执行。[timeout]超时时间，只要见到是带中括号的说明可写可不写。
p.is_alive()  #判断进程实例是否还在执行。
p.terminate(),直接结束进程。
这儿是父进程的代码。

主进程等待Process子进程先结束，所以更要用Process。

from multiprocessing import Process
class MyNewProcess(Process):
	def run(self):
		while True:
			print("----1----")
			timr.sleep(1)
p = MyNewProcess()
p.start() #单例模式，run相当于start。将start写入class中的run即可。
while True:
	print("----main----")
	time.sleep(1)
	
进程池：po.close()   #关闭进程池，关闭后po不在接受新的请求
	po.join()  #等待po中所有子进程执行完成，必须放在close语句之后。
from multiprocessing import Pool
import os
import random
import time
def worker():
	for i in range(5):
		print("pid:%d  num:%d"%（os.getpid(),num))
		time.sleep(1)

#3表示，进程池中有三个进程一执行。
pool = Pool（3）

for i in range(10)
	print("%d"%i)
	#向进程池中添加任务
	#注意：如果添加的任务数量超过了，进程池中进程个数的话，那么不会导致添加不进入
	#	添加到进程中的任务，如果还没有被执行的话，那么此时，他们会等待进程池中的进程完成一个任务之后，会自动的去用刚刚的那个进程，完成当前的新任务。
	pool.apply_async(worker,(i,))
pool.close()  #关闭进程池，相当于 不能够再次添加新任务了
pool.join()  #主进程 创建/添加。任务后，主进程默认不会等待进程池中的任务执行完后才结束，而是当主进程的任务做完之后，立马结束，，，如果这个地方没join，会导致进程池中的任务不会执行。

进程池中的堵塞方式，这句代码一般是例子模式，不能够调换进程执行顺序。
pool.apply(worker,(i,))











Queue 默认是堵塞的。
q = Queue(3)
q.put(100)
q.put(200)
q.get()
q.full()
q.empty()
q.qsize()判断内部有多少个数据。
q.get_nowait()
q.put_nowait()
进程通信的两种方法。


vi编辑器
：w保存

文件夹案例
import os
os.mkdir("name")建立文件夹
os.rmdir("name")删除文件夹
os.listdir("文件夹名字")获取文件夹内部的文件




from socket import *
socket(套接字)：
#udp套接字初始工作
s = socket(AF_INET,SOCK_DGRAM)
#udp套接字初始工作
s = socket(AF_INET,SOCK_STREAM)
#发送数据
s.sendto(b"sendcentent",("192.168.1.1",8080))   #ip不写表示本机上任何一个IP地址。
s.sendto("sendcentent".encode("utf-8"),("192.168.1.1",8080))  #发送汉子
gb2312
utf-8
b python3中发送。
#取回数据：
content，contentipandport = s.recvfrom(1024) #限制在1024个字节以内。
print(content.decode("gb2312"))


设置一个固定的端口：s.bind(("",8080))以固定的端口访问。做服务器时必须设置。
接收数据：recvData = s.recvfrom(1024)  #收1024个字节。

UDP广播：
import socket,sys
dest = ("<broadcast>",7788)  #<broadcast>这个意思默认本地广播IP
#创建UDP套接字
s = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
#如果要广播必须有下面这句话。
s.setsockopt(socket.SOL_SOCKET,socket.SO_BROADCAST,1)
#以广播形式发送数据
s.sendto("Hi",dest)


port:端口


TCP:
from socket import *
serverSocket = socket(AF_INET,SOCK_STREAM)
serverSocket.bind(("",8899))  #设置端口
serverSocket.listen(5)  #设置最大连接数  mac有用，Linux没有用。
clientSocket,clientInfo = serverSocket.accept() #取回的新客户链接信息
#clientSocket:表示新的客户端
#clientInfo ：表示新的客户端的IP和port.
recvData = clientSocket.recv(1024)  #收到数据

clientSocket.close()   #客户断开
serverSocket.close()   #TCP服务器关闭

客户端：
from socket import *
clientSocket = socket(AF_INET,SOCK_STREAM)
clientSocket.connect(("服务器IP",8989))
clientSocket.send("content".encode("gb2312"))  #发送数据
recvData = clientSocket.recv(1024)  #取数据
clientSocket.close()



长连接：就像视频，获得数据几乎不断。
短连接：就像浏览器访问网站，获得数据进行很多次的链接关闭。

tcp三次握手和四次挥手：



循环次数：
ConnNum = 10
for i in range(ConnNum)
	print（i）



单进程：
s.setsockopt(SOL_SOCKET, SO_REUSEASSR ,1)   #重复使用绑定的信息，在意外断开时解决端口不能用的问题。
用
try:
	recv命令
finally:
	s.close()

多进程处理时，要把创建多余的用户close掉（因为是复制的）。多线程不能close因为数据是共享的。

网络连接协议：apr，rapr,icmp,dns，ACK是确认包的意思。

网络soi模型一共七层

网关具有转发数据的能力。
网络取回客户就是三次握手，断开就是四次挥手。
长链接短连接。
TTL经过的路由器的个数128减个数。
TCP：系统延迟一般5分钟。
MSL：最长等待时间。

网络攻击：
用原始套接字。
DNS改变攻击
Mac转接攻击，数据拦截发送攻击
进程中写实拷贝：cow()
Ctrl+D选中的所有相同字符全部更改。



epoll:(最大链接数没有显示，以事件通知机制)

大量计算用进程，大量等待用线程或者协程。

__getattribute__() 内不能调用self的实例属性。

各种魔法函数的作用。

原始字符r:"abc\n"。
"\\n"输出“\n”.




正则表达函数：不符合规定返回Nan。一般字符串前加r，成为原始字符。最好用r.
import re
re.match("1[35678]\d{9}")   #match过滤方向从右向左过滤。
.匹配任意一个字符。
[^23456]举例字符。
\d匹配数字0-9.
\D匹配非数字。
\s匹配空白，即空格，tab键，\n。
\S匹配非空白。
\w匹配单词字符，即a-z,A-Z,0-9。
\W匹配非单词字符。

表示数量：
*匹配前一个字符出现0次或者无限次，即可有可无。
+匹配前一个字符出现1次或者无限次，即至少有1次。
？匹配前一个字符出现1次或者0次，即要么有1次，要么没有。
{m}匹配前一个字符出现m次。
{m,}匹配前一个字符至少出现m次。
{m,n}匹配前一个字符出现从m到n次。

特定符号：
|匹配左右任意一个表达式。
（ab）将符号中字符作为一个分组。※可以快速获取文字。
		例：In [71]: print(re.match(r"<(.*)><(.*)>(.*)</\2></\1>",r"<html><h1>我是中间值</h1></html>").group(3))
			Out  我是中间值
\num引用分组num匹配到的字符串。
（？分组起别名。
（？P=name）引用别名为name分组匹配到的字符串。

表示边界：
^匹配字符串开头。
$匹配字符串结尾。
\b匹配一个单词的边界。
\B匹配非单词的边界。

re.search("要搜寻的名字"，"数据源")  #此功能只能找到一个然后返回。
re.findall()  #此功能能够找到所有并返回。
re.sub("规则部分"，"要替换部分"，"数据源"）    #替换所有数据下面介绍加入函数替换。
高级替换：
def replace(result)
	print(result.group())
	r = int(result.group())+50
	return str(r)
re.sub(r"\d+",replace,"python=100,php=50")
out 'python=1050,php=50'
切割字符串：
re.split("分割符号"，s)

关闭贪婪模式解决方式：只关闭问好前面的那个加号贪婪模式：(贪婪是问号后边的贪婪)当与预期效果不一样的时候很有可能是贪婪模式在作怪。
r = re.match(r"(.+?)(\d+)-(\d+)-(\d+)-(\d+)",r"This is number:234-452-34-452")
获取连接域名：
re.sub(r"(http://.+?/).*",lambda x:x.group(1),r"http://www.baidu.com/wws/qq?id=100")

re.group(1)  #1表示在一个字符串里，第一次使用括号里面的值。
re.groups()  #输出所有的组。

三个双引号表示处理字符串，不用管引号不用管空格转义字符等：
str = """
字符串
字符串
字符串
字符串
"""

计算代码执行时间（计算时间复杂度）：
	import time
	start = time.time()
或者	
	import timeit
	from timeit import Timer
	time1 = timeit.timer(函数,来源)构造运算器，测算时间复杂度
	time1 = timeit.timer(test1,from __main__ import test1)构造运算器，测算时间复杂度
	time = time1.timeit.timeit(number=10000)执行测算测试多少次

将range转换为一个列表list(range(1000))

将数组连接起来的那种方法：注意深拷贝与浅拷贝。
	li1 = [11,22]
	li2 = [33,44]
	第一种：li = li1+li2  加是导向新的列表了
	第二种：
		li = [i for i in range(1000)]
	第三种：
		list1 = []
		for li in li2：
			list1.append(li)
	第四种：
